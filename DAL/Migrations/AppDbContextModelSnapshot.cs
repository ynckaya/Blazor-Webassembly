// <auto-generated />
using System;
using DAL.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("DAL.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("WindowId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WindowId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f863bad-29a7-42bc-b24b-fbb7db7b8ec4"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4750),
                            Height = 1850,
                            Type = "Doors",
                            Width = 1200,
                            WindowId = new Guid("0acbce03-0400-4ffc-ac99-c6409a12c092")
                        },
                        new
                        {
                            Id = new Guid("16518b0a-3555-4fba-b84c-55d97eba9dcc"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4760),
                            Height = 1850,
                            Type = "Window",
                            Width = 800,
                            WindowId = new Guid("0acbce03-0400-4ffc-ac99-c6409a12c092")
                        },
                        new
                        {
                            Id = new Guid("d95d2178-2172-4d34-b6cb-1d698bc85068"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4770),
                            Height = 1850,
                            Type = "Window",
                            Width = 700,
                            WindowId = new Guid("0acbce03-0400-4ffc-ac99-c6409a12c092")
                        },
                        new
                        {
                            Id = new Guid("66c55954-d519-4e46-b070-f1ce148e68d5"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4770),
                            Height = 2000,
                            Type = "Window",
                            Width = 1500,
                            WindowId = new Guid("35ea7fd9-c332-4a92-8018-83850c9b6325")
                        },
                        new
                        {
                            Id = new Guid("737274fd-6931-413c-8ab9-cf2855a307bd"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4780),
                            Height = 2200,
                            Type = "Doors",
                            Width = 1400,
                            WindowId = new Guid("bd266222-a2cf-4e2d-93ed-4fd18ae0b3ad")
                        },
                        new
                        {
                            Id = new Guid("74d82df8-45dd-422b-b802-17ec1cc13033"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4790),
                            Height = 2200,
                            Type = "Window",
                            Width = 600,
                            WindowId = new Guid("bd266222-a2cf-4e2d-93ed-4fd18ae0b3ad")
                        },
                        new
                        {
                            Id = new Guid("b6c00115-5a33-4c90-b8da-c81d0c8d53ab"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4790),
                            Height = 2000,
                            Type = "Doors",
                            Width = 1500,
                            WindowId = new Guid("0b236432-92be-4890-bdc5-84a27279b1d3")
                        },
                        new
                        {
                            Id = new Guid("be3d65fd-e324-423d-87c2-d528043c7782"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4800),
                            Height = 2000,
                            Type = "Window",
                            Width = 1500,
                            WindowId = new Guid("0b236432-92be-4890-bdc5-84a27279b1d3")
                        });
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b45ba972-743f-4eec-9e90-4f95b8f5e4ef"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4650),
                            Name = "New York Building 1",
                            State = "NY"
                        },
                        new
                        {
                            Id = new Guid("fba58d08-0ef0-4242-8d2b-86e9fc75613b"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4690),
                            Name = "California Hotel AJK",
                            State = "CA"
                        });
                });

            modelBuilder.Entity("DAL.Models.Window", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantityOfWindows")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Windows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0acbce03-0400-4ffc-ac99-c6409a12c092"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4700),
                            Name = "A51",
                            OrderId = new Guid("b45ba972-743f-4eec-9e90-4f95b8f5e4ef"),
                            QuantityOfWindows = 4
                        },
                        new
                        {
                            Id = new Guid("35ea7fd9-c332-4a92-8018-83850c9b6325"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4730),
                            Name = "C Zone 5",
                            OrderId = new Guid("b45ba972-743f-4eec-9e90-4f95b8f5e4ef"),
                            QuantityOfWindows = 2
                        },
                        new
                        {
                            Id = new Guid("bd266222-a2cf-4e2d-93ed-4fd18ae0b3ad"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4730),
                            Name = "GLB",
                            OrderId = new Guid("fba58d08-0ef0-4242-8d2b-86e9fc75613b"),
                            QuantityOfWindows = 3
                        },
                        new
                        {
                            Id = new Guid("0b236432-92be-4890-bdc5-84a27279b1d3"),
                            CreatedDate = new DateTime(2024, 1, 6, 0, 20, 25, 103, DateTimeKind.Local).AddTicks(4740),
                            Name = "OHF",
                            OrderId = new Guid("fba58d08-0ef0-4242-8d2b-86e9fc75613b"),
                            QuantityOfWindows = 10
                        });
                });

            modelBuilder.Entity("DAL.Models.Item", b =>
                {
                    b.HasOne("DAL.Models.Window", "Window")
                        .WithMany("Items")
                        .HasForeignKey("WindowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Window");
                });

            modelBuilder.Entity("DAL.Models.Window", b =>
                {
                    b.HasOne("DAL.Models.Order", "Order")
                        .WithMany("Windows")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.Navigation("Windows");
                });

            modelBuilder.Entity("DAL.Models.Window", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
